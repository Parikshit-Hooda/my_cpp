/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void flatten(TreeNode* root) {

        if(root == nullptr) return ;
        TreeNode *curr = root;
        stack<TreeNode* > stk;
        stk.push(curr);
        while(!stk.empty()) {
            TreeNode *stkTop = stk.top();
            stk.pop();
            //push right, then left if they exist
            if(stkTop->right != nullptr) {
                stk.push(stkTop->right);
            }
            if(stkTop->left != nullptr) {
                stk.push(stkTop->left);
            }

            //point left and right
            if(!stk.empty() )stkTop->right = stk.top();
            stkTop->left = nullptr;

        }

        return ;
        
    }
};
