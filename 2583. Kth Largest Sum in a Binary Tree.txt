/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    long long kthLargestLevelSum(TreeNode* root, int k) {
        //max heap priority queue
        priority_queue<long long> pq;
        long long res = -1;
        //1. calc level sum. 
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()) {
            //calc level sum
            long long levelsum = 0;
        //2. for each level sum, push to priority queue.
            int qsize = q.size();
            //pop qsize eles and push their children
            for(int i = 0; i < qsize; i++) {
                TreeNode* qfront = q.front(); levelsum += qfront->val; q.pop();
                if(qfront->left) q.push(qfront->left); 
                if(qfront->right) q.push(qfront->right); 
            }
            //push levelsum to priority queue
            pq.push(levelsum);
            // if(pq.size)
            
        }
        //3. for each push, if size 
        int cnt=1;
        while(!pq.empty()) {
            cout << pq.top() << " ";
            if(cnt == k) {
                res = (pq.top());
                break;
            }
            pq.pop();
            cnt++;
        }
        
        return res;
    }
};
