/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        if(root == nullptr) return res;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            //push all in vec
            int qsize = q.size();
            vector<int> currlevel;
            //for qsize times, pop from q front. push that in currlevel, explore its children and push them in q
            for(int i = 0 ; i < qsize; i++) {
                TreeNode* front = q.front();
                q.pop();
                currlevel.push_back(front->val);
                if(front->left != nullptr) {
                    q.push(front->left);
                }
                if(front->right != nullptr) {
                    q.push(front->right);
                }
            }

            res.push_back(currlevel);
        }

        return res;
    }
};
