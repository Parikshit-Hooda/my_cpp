//https://leetcode.com/problems/binary-tree-paths/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    void btpUtil(TreeNode *root, string cp, vector<string> &result) {
        cp += to_string(root->val);
        if(root->left == nullptr && root->right == nullptr) {
            result.push_back(cp);
            return ;
        }
        string cpath;
        if(root->left != nullptr) {
            cpath = cp + "->";
            btpUtil(root->left, cpath, result);
        }
        if(root->right != nullptr) {
           cpath = cp + "->";
            btpUtil(root->right, cpath, result);
        }        
        return ;
    }
    
    vector<string> binaryTreePaths(TreeNode* root) {
        
        vector<string> res;
        string cp = "";
        if(root == nullptr) return res;
        btpUtil(root, cp, res);
        return res;
        
    }
};
