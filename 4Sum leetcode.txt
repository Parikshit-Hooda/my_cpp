class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> res;
        if(nums.size() < 4) return res;
        
        sort(nums.begin(), nums.end());
        
        //all valid sized input nums here
        int nsize = nums.size();
        for(int i  = 0 ; i < nsize; i++) {
            int target_3 = target - nums[i];
            for(int j = i+1; j < nsize-2; j++) {
                
                vector<int> quad;
                int target_2 = target_3 - nums[j];
                //init left and right
                int left = j+1, right = nsize-1;
                while(left < right) {
                    
                    int two_sum = nums[left] + nums[right];
                    
                    if(two_sum < target_2) left++;
                    else if (two_sum > target_2) right--;
                    else {
                        vector<int> quad(4,0);
                        quad[0] = nums[i];
                        quad[1] = nums[j];
                        quad[2] = nums[left];
                        quad[3] = nums[right];
                        res.push_back(quad);
                      //quad.clear();
                        
                        while(left < right && nums[left] == quad[2]) left++;
                        while(left < right && nums[right] == quad[3]) right--;
                        
                    }

                }
                
                //update j
                while(j+1 < nsize && nums[j] == nums[j+1]) j++;
                
                
            }
            //update i
            while(i+1 < nsize && nums[i] == nums[i+1]) i++;
            
        }
        
        return res;
    }
};
