https://leetcode.com/problems/trapping-rain-water/
class Solution {
public:
    int trap(vector<int>& h) {
     
        if(h.size() < 2) return 0;
        
        //         approach 2
//         int lmax = 0, rmax = 0, res = 0, l = 0, r = h.size()-1;
//         int hsize = h.size()-1;
        
//         while(l <= r) {
//             if(h[l] <= h[r]) {
//                 if(h[l]>=lmax) {
//                     //can't store water
//                     lmax = h[l];
//                     l++;
//                 } else {
//                     res += lmax - h[l];
//                     l++;
//                 }
//             } else {
//                 if(h[r] >= rmax) {
//                     rmax = h[r];
//                     r--;
//                 } else {
//                     res += rmax-h[r];
//                     r--;
//                 }
//             }
            
            
//         } //while loop
        
//         return res;
        
        //number of building more than 1
        //approach 1
        vector<int> r(h.size(), 0);
        vector<int> l(h.size(), 0);
        
        l[0] = h[0];
        for(int i = 1 ; i < h.size(); i++) {
            if(l[i-1] >= h[i]) {
                l[i] = l[i-1];
            } else {
                l[i] = h[i];
            }
        }
        int hsize = h.size();
        r[hsize-1] = h[hsize-1];
        for(int i = hsize-2 ; i >= 0; i--) {
            if(r[i+1] >= h[i]) {
                r[i] = r[i+1];
            } else {
                r[i] = h[i];
            }
        }
        
        //l and r arrays made
        int res = 0 ;
        for(int i = 0 ; i < hsize ; i++) {
            res = res + (min(l[i], r[i]) - h[i]);
        }
        
        return res;
        
        
    }
};
