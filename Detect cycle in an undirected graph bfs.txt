//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
    bool detectCycle(int i, vector<int> adj[], vector<bool> &vis) {
        //i is starting for the bfs
        queue<pair<int,int>> q;
        q.push({i,-1}); //{src,parent}
        vis[i] = true;
        while(!q.empty()) {
            //get front
            int curr = q.front().first, parent = q.front().second;
            q.pop();
            for(auto adjNode: adj[curr]) {
                if(!vis[adjNode]) {
                    //if adj node not visited
                    q.push({adjNode, curr});
                    vis[adjNode] = true;
                    
                } else {
                    if(parent != adjNode) return true;
                }
            }
        }
        return false;
        
    } //detectcycle 
    
    
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
      
      vector<bool> vis(V,0);
      for(int i = 0 ; i < V; i++) {
          if(!vis[i]) {
              if(detectCycle(i,adj,vis) == true) return true;
          }
      }
      return false;
 
    } //iscycle ends
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(V, adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";
    }
    return 0;
}
// } Driver Code Ends
