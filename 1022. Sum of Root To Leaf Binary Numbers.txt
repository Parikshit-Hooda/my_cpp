/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int finddec(vector<int> vec) {
        int sum=0;
        //101 -> 4+0+1 = 5, 2^2*1 + 2^1*0 + 2^0*1 = 4
        int expo=0;
        for(int i = vec.size()-1; i >= 0; i--) {
            sum += pow(2,expo) * vec[i];
            expo++;
        }
        // cout <<"sum " << sum << endl;
        return sum;
    }

    void calccurrent(TreeNode* node, vector<int> curr, int &sum) {

        if(node->left == nullptr && node->right == nullptr) {
            curr.push_back(node->val);
                        for(int i = 0; i < curr.size(); i++) {
                cout << curr[i] << " "; //not good
            }
            cout<<endl;
            sum += finddec(curr);
            //call finddec
            return ;
        }
        curr.push_back(node->val);
        if(node->left)
            calccurrent(node->left,curr,sum);
        if(node->right)
            calccurrent(node->right,curr,sum);


        return ;

    }

    int sumRootToLeaf(TreeNode* root) {
        vector<int> curr;
        int res = 0;
        calccurrent(root, curr, res);
        return res;
    }
};
