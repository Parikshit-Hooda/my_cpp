#include <iostream>
using namespace std;

struct Node {
	Node *links[26];
	int ew=0,cp=0;
	//functions
	bool containsKey(char c) {
		return (links[c-'a'] != NULL);
	}
	Node* get(char c) {
		return links[c - 'a'];
	}
	
	void put(Node* root, char c) {
		links[c - 'a'] = root;
		
	}
	
	void increaseEnd() {
		ew++; return ;
	}	
	
	void increasePrefix() {
		cp++; return ;
	}
	
	void deleteEnd() {
		ew--; return ;
	}
	
	void reducePrefix() {
		cp--; return ;
	}
	
	int getEnd() {
		return ew; 
	}
	
	int getPrefix() {
		return cp;
	}
}

class Trie {
	private:
	Node* root;
	
	public:
		Trie() {
			root = new Node();
		}
		
		void insert(string word) {
			//for every c in word, if trie doesn't exist, create new trie and link.
			//move to new trie
			//in end, mark flag as true
			Node *node = root;//here I have access to root node of trie
			for(int i = 0; i < word.size(); i++) {
				char curr = word[i];
				if(!containsKey(curr)) {
					node->put(node, curr);
				}
				node = node->get(curr);
				node->increasePrefix();
			}
			node->increaseEnd();
			return ;
		}
		
		int countWordsEqualTo(string word) {
			Node *node = root;
			for(int i = 0; i < word.size(); i++) {
				char curr = word[i];
				if(!containsKey(curr)) return 0;
				node = node->get(curr);
			}
			return node->getEnd();
		}
		
		int countWordsStartingWith(string word) {
			Node *node = root;
			for(int i = 0; i < word.size(); i++) {
				char curr = word[i];
				if(!containsKey(curr)) return 0;
				node = node->get(curr);
			}
			return node->getPrefix();			
		}
		
		void erase(string word) {
			Node *node = root;
			for(int i = 0; i < word.size();i++){
				char curr = word[i];
				if(!containsKey(curr)) {
					return ;
				}
				node = node->get(curr);
				node->reducePrefix();
			}
			node->deleteEnd();
			return ;
		}
}


int main() {
	// your code goes here
	return 0;
}
