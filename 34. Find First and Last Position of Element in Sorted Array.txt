class Solution {
public:

    int modifiedBinarySearch(vector<int> nums, int target, bool isFindingFirst) {
        int start = 0, end = nums.size()-1;
        int ans = -1;

        while (start <= end) {
            int mid = start + (end-start) /2;

            if (nums[mid] == target) {
                ans = mid;
                if (isFindingFirst) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            } else if (nums[mid] > target) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }

        return ans;
    }

    vector<int> searchRange(vector<int>& nums, int target) {
                vector<int> res(2, -1);

        res[0] = modifiedBinarySearch(nums, target, true);
        res[1] = modifiedBinarySearch(nums, target, false);

        return res;
    }
};
