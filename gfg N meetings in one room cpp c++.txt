        //https://practice.geeksforgeeks.org/problems/n-meetings-in-one-room-1587115620/1#
        // Your code here
        
        //1. sort start and end by start elements in ascending order
        //considering that start and end are sorted here
        vector<vector<int>> m;
        
        for(int i = 0 ; i < n ; i++) {
            vector<int> newvec;
            newvec.push_back(start[i]);
            newvec.push_back(end[i]);
            newvec.push_back(i+1);
            m.push_back(newvec);
        }
        
        sort(m.begin(), m.end(), comp); //vector sorted
        //by end time, then start, then position
        
        //loop from second meeting to last
        //maintain min start time required
        int mst = m[0][1];
        
        int count = 1;
        
        for(int i = 1 ; i < n ; i++) {
            //if current meeting start time greater than mst, count++
            if(m[i][0] > mst) {
                count++;
                mst = m[i][1];
               // continue;
            }
 
        }
        
        return count;
        
        
        //GFG leaner approach
        /*
                 int i,count=1,j;
        vector<pair<int,int>> v;
        for(i=0;i<n;i++)
            v.push_back({end[i],start[i]});
        sort(v.begin(),v.end());
        j=v[0].first;
        for(i=1;i<n;i++)
        {
            if(v[i].second>j)
            {
                count+=1;
                j=v[i].first;
            }
        }
        return count;
        */
