/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> findMode(TreeNode* root) {
        //iterate through and keep a map where you keep track of frequency of occurences
        vector<int>v;
        map<int,int> mp;
        if(!root){return v;}
        queue<TreeNode*>q;
        TreeNode* curr = root;
        q.push(curr);
        while(!q.empty()){
            curr=q.front();
            mp[curr->val]++;
            q.pop();
            v.push_back(curr->val);
            if(curr->left){q.push(curr->left);}
            if(curr->right){q.push(curr->right);}
        }
    //mp contains int->freq map

    //find max freq
    int maxfreq = 0;
    for(auto ele: mp) {
        maxfreq = max(maxfreq, ele.second);
    }

    vector<int> res;

    for(auto ele: mp) {
        if(ele.second == maxfreq) res.push_back(ele.first);
    }

    return res;
    }
};
