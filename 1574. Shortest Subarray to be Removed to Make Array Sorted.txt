//https://leetcode.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/solutions/830480/c-o-n-sliding-window-explanation-with-illustrations/
class Solution {
public:
    int findLengthOfShortestSubarray(vector<int>& nums) {
        int N = nums.size(), left = 0, right = N - 1;
        while (left + 1 < N && nums[left] <= nums[left + 1]) ++left;

        if (left == nums.size() - 1) return 0;

        while (right > left && nums[right - 1] <= nums[right]) --right;

        int ans = min(N - left - 1, right), i = 0, j = right; //max, we shrink this ans window below

        while (i <= left && j < N) {
            if (nums[j] >= nums[i]) {
                ans = min(ans, j - i - 1);
                ++i;
            } else ++j;
        }

        return ans;
    }
};
