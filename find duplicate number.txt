//solving https://leetcode.com/problems/find-the-duplicate-number/ in a not-in-place approach
#include <iostream>
#include <vector>
using namespace std;

void swap(int &a, int &b) {
	int temp = a;
	a = b;
	b = temp;
}

int fn(vector<int> &a) {
	if(a.size() == 0) return -1;
	if(a.size() == 1) return -1;
	
	int i = 0;
	while(i < a.size()) {
		if(a[i] == i+1) {
			i++;
			continue;
		} else if(a[i] != i+1) {
			
			//swap here
			//if swapped values are same, return
			int first = a[i];
			int second = a[a[i]-1];
			if(first == second) {
				//return
				return first;
			} else {
				//perform swap
				swap(a[i], a[a[i]-1]);
			}
		}
		
	}
	
	return -1;
	
}

int main() {
	// your code goes here
	vector<int> a = {4,3,2,1,2,2};
	cout << fn(a);
	return 0;
}
