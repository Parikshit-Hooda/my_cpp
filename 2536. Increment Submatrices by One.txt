//AC
class Solution {
public:
    
    void printm(vector<vector<int>> &m, int n) {
                for(int i =0 ; i < n; i++) {
            for(int j= 0; j < n; j++) {
                  cout << m[i][j] <<" ";
            }
            cout << endl;
        }
        return ;
    }
    
    vector<vector<int>> rangeAddQueries(int n, vector<vector<int>>& queries) {
        //naive - process each query
        
        vector<vector<int>> m(n, vector<int> (n,0));
                vector<vector<int>> res(n, vector<int> (n,0));

        
        for(vector<int> query: queries) {
            int cr1 = query[0], cr2 = query[2], cc1 = query[1], cc2 = query[3];
            //mark m
            for(int i = cr1; i <= cr2; i++) {
                m[i][cc1]++;
                if(cc2+1 < n) m[i][cc2+1]--;
            }
            
            
        }
                // printm(m,n); //good till here

        cout <<"\n before update \n";
        
//         //update m
        for(int i = 0 ; i < n; i++) {
            int curr=0;
            for(int j = 0 ; j < n; j++) {
                
                curr = curr + m[i][j];
                res[i][j] += curr;
                
            }
        }
        
        // printm(res,n);

        
        return res;
    }
};


//below returns TLE
class Solution {
public:
    
    void printm(vector<vector<int>> &m, int n) {
                for(int i =0 ; i < n; i++) {
            for(int j= 0; j < n; j++) {
                cout << m[i][j] <<" ";
            }
            cout << endl;
        }
        return ;
    }
    
    vector<vector<int>> rangeAddQueries(int n, vector<vector<int>>& queries) {
        //naive - process each query
        
        vector<vector<int>> m(n, vector<int> (n,0));
        
        for(vector<int> query: queries) {
            vector<int> cq = query;
            //manip m
            for(int i = cq[0]; i <= cq[2]; i++) {
                for(int j = cq[1]; j <= cq[3]; j++) {
                    m[i][j] += 1;
                }
            }
            
        }

        
        return m;
    }
};
