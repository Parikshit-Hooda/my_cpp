class Solution {
public:
    bool canJump(vector<int>& nums) {
        bool res = false;
        long long reach = 0;
        if(nums.size()==1) return true;
        if(nums[0] == 0) return false;
        
        //approach 1 - create a boolean reachable array to track whether each point is reachable
        //O(N^2)?
        //if i iterate and at any point, i see my max reachable <= current index, i can return false;
        vector<bool> r(nums.size(), false);

        long long m = 0 + nums[0];
        r[m] = true;
        for(int i = 0; i < nums.size(); i++) {
            if(i <= m) {
                //update - reachable
                m = max(m, (long long)(i + nums[i]));
                cout << "m is " << m << endl;
                if(m >= nums.size()) {res= true; break;}
                r[m] = true;
            } else {
                res = false; break;
            }
        }
        if(m >= nums.size() || r[nums.size()-1] == true) res = true;
        return res;
    }
};
