//https://www.pepcoding.com/resources/online-java-foundation/stacks-and-queues/next-greater-element-official/ojquestion
#include <bits/stdc++.h>
using namespace std;
void display(vector<int>a) {
  for (int i = 0; i < a.size(); i++)
  {
    cout << a[i] << endl;
  }
}
vector<int> solve(vector<int>nums1)
{
  //write your code here
          
        vector<int> res;
        if(nums1.size() == 0) return res;
        
        // map<int, int> mp;
        for(int i = 0 ; i < nums1.size(); i++) {
            res.push_back(0);
        }
        stack<int> stk;
        res[res.size()-1] = -1;
       // cout << nums1.size() << res.size() << endl;
        //for(auto i : res) cout << i << " ";
        //cout << endl;
        int n1size = nums1.size();
        stk.push(nums1[n1size-1]); //push last elements of nums2 to stk
        
        
        for(int i = n1size-2; i >= 0; i--) {
            //step 1. pop as many elements from stk as possible
            int curr = nums1[i];
            while(!stk.empty() && stk.top() < curr) stk.pop();
            
            //if stk is empty, do something 
            if(stk.empty()) res[i] = -1;
            else res[i] = stk.top();
            //else do something
            stk.push(nums1[i]);
            
        }
        
        //cout << res.size();
        return res;
  
  
}
int main(int argc, char** argv)
{
  int n;
  cin >> n;
  vector<int>arr(n, 0);
  for (int i = 0; i < n; i++)
  {
    cin >> arr[i];
  }
  vector<int>nge(n, 0);
  nge = solve(arr);
  display(nge);
  return 0;
}
