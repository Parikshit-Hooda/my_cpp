//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    // Function to return a list containing the DFS traversal of the graph.
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        // Code here
        vector<int> res;
        if(adj->size() == 0) return res;
        stack<int> st;
        //start from 0
        st.push(0);
        vector<bool> vis(V,0);
        //vis[0] = 1;
        while(!st.empty()) {
            int top = st.top();
            st.pop();
            //print
            if(!vis[top]) {
                res.push_back(top);
                vis[top] = 1;
            }
            //check neighbors
            auto curr = adj[top];
            for(int i = curr.size()-1; i >= 0 ; i--) {
                if(!vis[curr[i]]) st.push(curr[i]);
            }
            
        }
        return res;
    }
};


//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        // string s1;
        // cin>>s1;
        Solution obj;
        vector<int> ans = obj.dfsOfGraph(V, adj);
        for (int i = 0; i < ans.size(); i++) {
            cout << ans[i] << " ";
        }
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends
