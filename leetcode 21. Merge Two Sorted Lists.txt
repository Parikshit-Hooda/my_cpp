/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        
        if(list1 == nullptr) return list2;
        if(list2 == nullptr) return list1;

        ListNode* c1 = list1, *c2 = list2, *curr = nullptr, *newhead=nullptr;
        if(c1->val <= c2->val) {
            curr = c1;
            c1 = c1->next;
        } else {
            curr = c2;
            c2 = c2->next;
        } //curr allotted
    newhead = curr;
    while(c1 != nullptr && c2 != nullptr)
    {
        if(c1->val <= c2->val) {
            curr->next = c1, curr=c1, c1 = c1->next;
        } else if(c1->val > c2->val) {
            curr->next = c2, curr = c2, c2 = c2->next;
        }
    }

    //either c1 or c2 or both traversed completely
    if(c1 != nullptr) {
        curr->next = c1;
    } else curr->next = c2;


    return newhead;
    }
};
