//https://leetcode.com/problems/combination-sum/
class Solution {
public:
    
    void find_combination(const vector<int> &candidates, int target, int i, vector<int> &curr_combination, int curr_sum, vector<vector<int>> &res) {
        //cc - current combination, cd - candidataes, i - index, cs - current sum
        if(curr_sum == target) {
            res.push_back(curr_combination);
            return ;
        }
        
        if(curr_sum > target || i >= candidates.size()) return;
        
        if (curr_sum < target) {
            //put all elements one by one from cd in cc
            for(int idx = i; idx < candidates.size(); idx++) {
                //put curr element in cc - current combination
                curr_combination.push_back(candidates[idx]);
                curr_sum = curr_sum + candidates[idx];
                find_combination(candidates, target, idx, curr_combination, curr_sum, res);
                curr_sum = curr_sum - candidates[idx];
                curr_combination.pop_back();
            }
        }
        
        return ;
        
    } 
    
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        
        vector<vector<int>> res;
        if(candidates.size() == 0) return res;
        sort(candidates.begin(), candidates.end());
        //at least 2 candidates
        vector<int> curr_combination;
        int i = 0, curr_sum = 0;
        
        find_combination(candidates, target, i, curr_combination, curr_sum, res);
            
        return res;
        
    }
};
