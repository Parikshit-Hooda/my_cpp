/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    void formVals(vector<int> &vals, TreeNode* root) {
        //form inorder
        if(root == nullptr) return ;
        formVals(vals, root->left);
        vals.push_back(root->val);
        formVals(vals, root->right);
        return ;
    }

    bool find2Sum(vector<int> &vals, int k) {
        int l = 0, r = vals.size()-1;
        bool res= false;
        while(l < r) {
            if(vals[l] + vals[r] == k) {res = true; break;}

            if(vals[l] + vals[r] < k ) {
                l++;
            } else r--;
        }

    return res;
    }


    bool findTarget(TreeNode* root, int k) {
        vector<int> vals;
        TreeNode* curr = root;
        formVals(vals, curr);

        for(auto val: vals) cout << val << " ";

        bool res = find2Sum(vals, k);

        return res;
    }
};
