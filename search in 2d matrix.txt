//https://leetcode.com/problems/search-a-2d-matrix/
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        if(matrix.size() == 0) return false;
        
        if(matrix.size() == 1 && matrix[0].size() == 1) {
            if(matrix[0][0] == target) return true;
            return false;   
        }
        
        int msize = matrix[0].size();
        
        int rowval = -1;
        int top = 0, bottom = matrix.size()-1;
        
        while(top <= bottom) {
            
            int mid = top + (bottom-top)/2;
            cout << "currmid" <<mid <<  endl;
            
            if(target >= matrix[mid][0] && target <= matrix[mid][msize-1]) {
                cout <<"inside mid assign"<< endl;
                rowval = mid;
                break;
            } else if (target > matrix[mid][msize-1]) {
                cout <<"target > mid";
                top = mid+1;
            } else if (target < matrix[mid][0]) {
                cout <<"target < mid";
                bottom = mid-1;
            }       
        }
        cout << "rowval" << rowval << endl;
        if(rowval == -1) return false;
        
        int curr_row = rowval;
        int colval = -1;
        
        top = 0, bottom = matrix[rowval].size()-1;
        
        while(top <= bottom) {
            int mid = top + (bottom-top)/2;
            
            int curr_ele = matrix[curr_row][mid];
            if(target == curr_ele) {
                colval = mid;
                break;
            }
            if(target < curr_ele) {
                bottom = mid-1;
            } else {
                top = mid+1;
            }
  
        }
        
        cout << rowval << " " << colval << endl;
        
        if(rowval != -1 && colval != -1) return true;
        
        return false;
        
    }
};
