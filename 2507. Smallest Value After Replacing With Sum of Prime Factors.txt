class Solution {
public:
    
    vector<int> primeFactors(int n)
        {
            // Print the number of 2s that divide n
        vector<int> res;
            while (n % 2 == 0)
            {
                // cout << 2 << " ";
                res.push_back(2);
                n = n/2;
            }

            // n must be odd at this point. So we can skip
            // one element (Note i = i +2)
            for (int i = 3; i <= sqrt(n); i = i + 2)
            {
                // While i divides n, print i and divide n
                while (n % i == 0)
                {
                    // cout << i << " ";
                res.push_back(i);
                    
                    n = n/i;
                }
            }

            // This condition is to handle the case when n
            // is a prime number greater than 2
            if (n > 2)
                res.push_back(n);
                
                // cout << n << " ";
        
        return res;
        }
    
    
    
    
    
    
    
    int smallestValue(int n) {
        
        // vector<int> pfs= primeFactors(n); //good, gives prime factors
        // for(auto pf: pfs) cout << pf << " ";
        // cout << endl;
        
        int minval = INT_MAX;
        
        while(1) {
            // int cval = 0;
            //sum prime factors
            vector<int> pfs= primeFactors(n); //good, gives prime factors
                    for(auto pf: pfs) cout << pf << " ";
        cout << endl;
            //sum
            int csum = 0;
            for(auto pf: pfs) csum += pf;
            if(csum < minval) {
                //update minval
                minval = csum;
                n = csum;
                
            } else {
                break;
            }
            
            
            
        }
        
        
        return minval;
        
        
    }
};
