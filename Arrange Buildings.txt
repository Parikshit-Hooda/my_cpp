//https://www.pepcoding.com/resources/online-java-foundation/dynamic-programming-and-greedy/arrange-buildings-official/ojquestion
#include <iostream>
#include <vector>

using namespace std;

long long int arrangeBuildings(int n) {
    
    if(n < 0) return 0;
    
    if(n==0) return 0;
    if(n==1) return 4;
    
    // vector<int> dp > vector< vector<int> > dp
    vector<vector<long long int>> dp(2, vector<long long int> (n+1,0));
    // vector<vector<int>> dp(2, vector<int> (n+1, 0));
 
    //dp[0][i] stores number of ways in which buildings can be arrange in i plots with last plot holding a building
    //dp[1][i] stores number of ways in which buildings can be arrange in i plots with last plot holding a space
    
    dp[0][0] = 0;
    dp[1][0] = 0;
    
    long long int a = 1, b = 1;
    
    for(int i = 2; i <= n; i++) {

        // if(i==1) {
        //     // dp[0][i] = 1;
        //     // dp[1][i] = 1;
        //     continue;
        // }
        long long int tempa = a, tempb = b;
        a = tempb;
        b = tempa + tempb;
       // dp[0][i] = dp[1][i-1];
        //    dp[1][i] = dp[1][i-1] + dp[0][i-1];
    }
    
    long long int res = a + b;
    return res*res;
    // long long int finalResult = dp[0][n] + dp[1][n];
    
    // return finalResult*finalResult;
}

int main() {
    
    int n;
    cin >> n;
    cout << arrangeBuildings(n);
    return 0;
    
}
