class RandomizedSet {
    unordered_map<int,int> mp;
    // int RAND_MAX = INT_MAX;
public:
    RandomizedSet() {
        // this.RAND_MAX = INT_MAX;
        // srand(time(0));
    }
    
    bool insert(int val) {
        //if val found in map
        if(mp.find(val) != mp.end()) return false;
        //else
        mp[val] = val;
        return true;
    }
    
    bool remove(int val) {
        //if val present
        if(mp.find(val) != mp.end()) {
            mp.erase(val);
            return true;
        }
        return false;
    }
    
    int getRandom() {
        //get map size
        int ms = mp.size();
        int idx = rand() % ms; //idx range - [0,ms), random idx
        unordered_map<int,int>::iterator itr = mp.begin();
        advance(itr, idx);
        cout << itr->first;
        return itr->first;
       // auto itr = mp.begin() + idx;
        //cout << itr.first;
        //return itr.first;


    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
