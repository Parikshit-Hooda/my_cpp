class Solution {
public:
    int largestSumAfterKNegations(vector<int>& nums, int k) {
        //min heap pq
        //for k times, pick top, negate and push back
        priority_queue<int, vector<int>, greater<int>> heap;

        for(auto ele: nums) heap.push(ele);

        for(int i = 0; i < k; i++) {
            int top = heap.top();
            heap.pop();
            top *= -1;
            heap.push(top);
        }
        int sum = 0;
        while(!heap.empty()) {
            int curr = heap.top(); heap.pop(); sum += curr;
            // heap += *ele;
            cout << curr << " ";
        } 
        cout << endl;
        return sum;
    }
};

/*
class Solution {
public:
    int largestSumAfterKNegations(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end());
        for(int i = 0 ; i < nums.size() && k > 0; i++) {
            if(nums[i] <= 0) {
                nums[i] *= -1; k--;
            } else break;
        }
        int sum = 0;
        int minnum = INT_MAX;
        for(auto ele: nums) {
            sum += ele;
            minnum = min(minnum, ele);
        }

        if(k%2) {
            //odd
            sum -= 2*minnum;
        } else {
            //even
        }

        // sort(nums.begin(), nums.end());

        // cout << "k " << k << endl;
        // for(auto ele: nums) cout << ele <<" ";
        // cout << endl;

        return sum;;
    }
};

*/
